package edu.finalproject;

import edu.finalproject.UI.UIService;

public class Main {
    public static void main(String[] args) {


        UIService ui = new UIService();
        ui.run();
        
    }
}

//ОБЯЗАТЕЛЬНЫЕ ТРЕБОВАНИЯ:
// Меню в цикле с выходом
// Кастомный класс должен иметь реализованный паттерн Builder. Для вводимых данных (в т.ч. из файла) должна производиться
// валидация данных.
// Возможность выбора заполнения исходного массива данных (из файла, рандом, вручную) и его длину
// Возможность найти элемент отсортированной коллекции при помощи алгоритма бинарного поиска
// Сортировки и бинарный поиск (никаких готовых сортировок) должны быть реализованы с использованием дженериков и быть
// универсальными под любые классы программы
// Сортировки реализовать с помощью паттерна стратегия. Сортировать необходимо кастомные классы (по всем 3 полям)
// Сортировка должна выполняться в ThreadPool и быть выполнена в несколько потоков (минимум 2).
//
// ДОСКА ДОПОЛНИТЕЛЬНЫХ ЗАДАЧ
// Дополнительное задание 1: дополнительно к основным сортировкам реализовать эти же алгоритмы сортировки таким образом,
// что объекты классов будут сортироваться по какому-либо числовому полю: объекты с четными значениями этого поля должны
// быть отсортированы в натуральном порядке, а с нечетными – оставаться на исходных позициях.
// Дополнительное задание 2: реализовать функционал для записи отсортированных коллекций/ найденных значений в файл в
// режиме добавления данных.
// Дополнительное задание 3: заполнение коллекций должно осуществляться посредством стримов. Коллекции для заполнения
// должны быть кастомными.
// Дополнительное задание 4: реализовать многопоточный метод, подсчитывающий количество вхождений элемента N в коллекцию и
// выводящий результат в консоль.
//
//
//     AstonFinalProject/
// ├── pom.xml
// ├── README.md
// └── src/
//     ├── main/java/edu/finalproject/
//     │   ├── Main.java                          # Main класс, UI        //Павел Лопатин
//     │   ├── model/                             # Класс User и builder  //Александр Грабельников
//     │   ├── sortAlgorithms/                    # Алгоритмы сортировки  //Рашит Назаров
//     │   ├── binarySearch/                      # Бинарный поиск        //Филип Смыслов
//     │   ├── validationUtils/                   # Валидация             //Антон Бисеров
//     │   └── insertOutput/                       # Ввод/вывод            //Антон Бисеров
//     └── test/java/edu/finalproject/            # Тесты

